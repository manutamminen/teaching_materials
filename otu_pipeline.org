# -*- org-export-babel-evaluate: nil -*-

#+PROPERTY: header-args :eval never-export

* OTU pipeline example

** On Unix

Clone the teaching materials directory

#+BEGIN_SRC sh
git clone https://github.com/manutamminen/teaching_materials
cd teaching_materials
#+END_SRC


Enable vsearch on the Unix cluster

#+BEGIN_SRC sh
module load vsearch
#+END_SRC


Process the reads and call the OTUs

Process example read set 1:

#+BEGIN_SRC sh
vsearch --fastq_mergepairs example1_R1.fastq --reverse example1_R2.fastq --fastq_minovlen 50 --fastq_maxdiffs 15 --fastqout example1_merged.fastq

vsearch --fastq_filter example1_merged.fastq --fastq_maxee 1 --fastaout example1.fasta

vsearch --derep_fulllength example1.fasta --strand plus --output example1_derep.fasta --sizeout --relabel example1.
#+END_SRC


Process example read set 2:

#+BEGIN_SRC sh
vsearch --fastq_mergepairs example2_R1.fastq --reverse example2_R2.fastq --fastq_minovlen 50 --fastq_maxdiffs 15 --fastqout example2_merged.fastq

vsearch --fastq_filter example2_merged.fastq --fastq_maxee 1 --fastaout example2.fasta

vsearch --derep_fulllength example2.fasta --strand plus --output example2_derep.fasta --sizeout --relabel example2.
#+END_SRC


Generalize this to any number of sequences:

#+BEGIN_SRC sh
ls example*_R1.fastq | awk -F'_' '{print $1}' | while read file; do vsearch --fastq_mergepairs ${file}_R1.fastq --reverse ${file}_R2.fastq --fastq_minovlen 50 --fastq_maxdiffs 15 --fastqout ${file}_merged.fastq; done

ls example*_R1.fastq | awk -F'_' '{print $1}' | while read file; do vsearch --fastq_filter ${file}_merged.fastq --fastq_maxee 1 --fastaout ${file}.fasta; done

ls example*_R1.fastq | awk -F'_' '{print $1}' | while read file; do vsearch --derep_fulllength ${file}.fasta --strand plus --output ${file}_derep.fasta --sizeout --relabel ${file}.; done
#+END_SRC

Combine the reads from the examples:

#+BEGIN_SRC sh
cat *derep.fasta > all.fasta
#+END_SRC


Cluster the reads into OTUs:

#+BEGIN_SRC sh
vsearch --cluster_size all.fasta --id 0.97 --strand plus --relabel OTU_ --centroids all_otus.fasta --otutabout all_otutab.txt
#+END_SRC


Annotate the reads:

#+BEGIN_SRC sh
wget http://drive5.com/sintax/rdp_16s_v16.fa.gz

gunzip rdp_16s_v16.fa.gz

vsearch --sintax all_otus.fasta --db rdp_16s_v16.fa --tabbedout all_annotation.txt
#+END_SRC

*** Useful Unix tricks

Count the number of sequences in a fastq. This employs [[http://manutamminen.info/posts/process_subst/][pipes]] and [[http://manutamminen.info/posts/awk/][Awk]].

#+BEGIN_SRC sh
wc -l FILE.fastq | awk '{print $1/4}'
#+END_SRC

Count the number of sequences in a fasta

#+BEGIN_SRC sh
grep -c ">" FILE.fasta
#+END_SRC

*Less* is an useful command for looking into the content of files.

#+BEGIN_SRC sh
less FILE.fasta
#+END_SRC

When viewing a file with less, navigate with the following commands:

- g - go to the beginning of the file
- G - go to the end of the file
- q - quit less
- <space> - scroll down one page

** On R

Load tidyverse and import OTU data

#+BEGIN_SRC R
library(tidyverse)

otu <- read_csv("https://raw.githubusercontent.com/manutamminen/teaching_materials/master/otu16.csv")
tax <- read_csv("https://raw.githubusercontent.com/manutamminen/teaching_materials/master/tax16.csv")
#+END_SRC


Prepare the OTUs for visualization

#+BEGIN_SRC R :session
long_otu <-
    pivot_longer(
        otu, 
        cols = -"OTU",
        names_to = "Location",
        values_to = "Freq")

ggplot(long_otu, aes(x=Location, y=Freq, fill=OTU)) + 
    geom_bar(stat="identity") +
    theme(axis.text.x = element_text(angle = -90))
#+END_SRC


Integrate taxonomic annotations to the visualization

#+BEGIN_SRC R
long_otu_tax <- 
  left_join(long_otu, tax, by="OTU")

ggplot(long_otu_tax, aes(x=Location, y=Freq, fill=Class)) + 
    geom_bar(stat="identity") +
    theme(axis.text.x = element_text(angle = -90))
#+END_SRC

